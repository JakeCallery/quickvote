// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// TODO: Check things work if user is deleted that has voted on things
//  Currently if a user is deleted, their topics are deleted as well
//  However their votes should remain on other users' topics

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  topics        Topic[]   @relation("OwnedTopics")
  items         Item[]
  Vote          Vote[]
  invitedTopics Topic[]   @relation("InvitedTopics")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Topic {
  id           String  @id @default(cuid())
  name         String
  User         User    @relation("OwnedTopics", fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  items        Item[]
  isOpen       Boolean @default(true)
  Vote         Vote[]
  invitedUsers User[]  @relation("InvitedTopics")

  @@index([userId])
}

model Item {
  id      String @id @default(cuid())
  name    String
  User    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  Topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId String
  Vote    Vote[]

  @@index([userId])
  @@index([topicId])
}

model Vote {
  id            String   @id @default(cuid())
  Owner         User?    @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId       String?
  Item          Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId        String
  Topic         Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId       String
  timeSubmitted DateTime @default(now())

  @@index([ownerId])
  @@index([itemId])
  @@index([topicId])
}
